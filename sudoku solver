def is_valid(board, row, col, num):
    # Check if the number is not already in the current row, column, or 3x3 subgrid
    for i in range(9):
        if board[row][i] == num or board[i][col] == num or board[row//3*3 + i//3][col//3*3 + i%3] == num:
            return False
    return True

def solve_sudoku(board):
    # Find an empty cell
    empty_cell = find_empty_cell(board)
    if not empty_cell:
        return True  # Board is solved
    row, col = empty_cell
    
    # Try placing numbers 1 through 9
    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num
            
            # Recursively solve the rest of the board
            if solve_sudoku(board):
                return True
            
            # If the current placement doesn't lead to a solution, backtrack
            board[row][col] = 0
            
    return False  # No solution found

def find_empty_cell(board):
    # Find the first empty cell (with value 0)
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return (i, j)
    return None  # No empty cell found

def print_board(board):
    for i in range(9):
        for j in range(9):
            print(board[i][j], end=" ")
            if (j + 1) % 3 == 0 and j < 8:
                print("|", end=" ")
        print()
        if (i + 1) % 3 == 0 and i < 8:
            print("-" * 21)

def get_user_input(board):
    print("Enter your solution for the Sudoku puzzle (use 0 for empty cells):")
    for i in range(9):
        for j in range(9):
            while True:
                try:
                    user_input = int(input(f"Enter value for cell [{i+1},{j+1}]: "))
                    if user_input < 0 or user_input > 9:
                        print("Please enter a number between 0 and 9.")
                    else:
                        board[i][j] = user_input
                        break
                except ValueError:
                    print("Please enter a valid integer.")

    return board

def is_solution_correct(board, original_board):
    for i in range(9):
        for j in range(9):
            if board[i][j] != original_board[i][j]:
                return False
    return True

# Example Sudoku puzzle (0 represents empty cells)
original_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

